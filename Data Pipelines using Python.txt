*************************************************BUILDING DATA PIPELINE USING PYTHON*************************************************

1. Data sources		--> operational data bases that store transactions
2. Target areas 	--> a collection of databases called data lakes
3. Data lakes 		--> consist of 3 main regions:
				a. Landing area 	--> area of truth. This is where data is stored as it is received
				b. Clean area		--> area where clean area resides
				c. Business area	--> area where special transformations are applied to data to match the domain requirement
4. A data lake is usually in the form of a FILE MANAGEMENT SYSTEM -- Unix / Linux / DOS etc..
5. DATA CATALOG 	--> To navigate a data lake, sometimes organisations provide DATA CATALOGS. This stores information on where the data resides and the format in which the data is being stored.
6. SPARK DATAFRAME 	--> Spark data frame is a distributed collection of data. They are often used for big data
7. SINGER		--> Data ingestion specification
				a. Data ingestion script --> tap
				b. Data load script --> target
				c. They communicate via:
					-- schema (table meta data)
					-- stream (process meta data)
					-- records (data)
				d. Data exchange format --> JSON

************************************************* JSON *************************************************
javascript object notation
syntax for storing and exchanging data
	
JSON package in python

1. You can use the methods within the json package by invoking the package name
	import json
2. The process of encoding a JSON is called Serialisation. The reverse process is called Deserialisation.

SERIALISATION 
To serialise a JSON you can do it 2 manners. 
	a. By using the .dump() method. To use this, we must use the following syntax.
		
		EXAMPLE: 
		with open("data_file.json","w") as write_file:
			json.dump( obj = "<name of JSON variable in the computer memory between double quotes>",
				   fp  = "<name of the file the value within the JSON variable will be serialised. In this case it is write_file>")
	b, By using the .dumps() method. This method makes the code easier to read and implicitly performs the above steps.
		EXAMPLE:
		json_string = json.dumps(obj = "name of JSON variable",
					 fp = "write_file")
CONTEXT MANAGERS
1. Context managers allow you to allocate and release resources as you wish.
2. Usually starts with a WITH clause
	example
		with open("data_file.txt","w") as write_file:
			write_file.write("hello")

DESERIALIZATION
1. The process of loading JSON data from memory is called deserialisation
2. Done with the help of a context manager
	example
		with open("data_file.json", "r") as read_file:
			data = json.load(read_file)
		print(data)


Running an ingestion pipeline with Singer 		
1. To generate a singer record, we called the write_record() function
2. When we combine the 'write_schema' and 'write_record' functions, we have a tap module in python which outputs to the console.
3. If we have a target that can parse this tap output, we have a full ingestion pipeline.

Getting data in to data lake
1. With the boom of IoT, interacting with web API is becoming a common way to ingest data in to the data lake. Need to do further study in to this.
					

REST
REST is essentially a set of useful conventions for structuring a web API
	Web API 	--> it is an application interface that you use to interact with a web URL, to get relevant data in return 
	GET method	--> Get method is used to get some information about an object in the website. Get method is not expected to make any change to that information
	POST method	--> Post method in contrast allows us to make change to the data. 


************************************************* WRITING to FILES *************************************************

Different modes of opening files
1. "w"	--> WRITE ONLY. If file present then truncates data. If file not present then the file is created. The cursor is placed at the beginning of the file.
2. "w+"	--> WRITE AND READ. If file present then truncates data. If file not present then the file is created. The cursor is placed at the beginning of the file.
3. "r"	--> READ ONLY. If file not present then throws I/o error. This is the default mode when the file is opened. The cursor is placed at the beginning of the file.
4. "r+"	--> READ AND WRITE. The cursor is placed at the beginning of the file
5. "a"	--> APPEND ONLY. If file not present, then creates one. If file is present then the cursor goes to the end of the file. Any new entries appended immediately after the existing data.
6. "a+"	--> APPEND AND READ. If file not present, then creates one. If file is present then the cursor goes to the end of the file. Any new entries appended to the bottom of the file 

OPENING FILE
1. For opening a file, we use the open() module. No external package is required for using this functionality.
2. File should exist in the same directory as the python code. 
3. 'r' is placed before the name/path of the file, to prevent the program from treating the characters within that string as special characters.
4. Essentially it tells the program that the string has no special characters. Tells it consider the string as a raw string.
	example:
	file_text = open(r"c:/temp/data_file.txt","w")

CLOSING FILE
1. For closing the file, close() function is used.
	example:
	file_txt = open(r"c:/temp/data_file.txt","w")
	print("file opened")
	file_txt.close()

WRITING TO A FILE
1. Done in the following manner:
	a. write() 	--> file_txt.write(" test string ")
	b. witelines() 	--> file_txt.writelines(l) for l = ["string1", "string2", "string3"]	// unable to test it out. Research more

READING FROM A FILE
1. Done in the following manner 
	a. read()	--> optional argument 'n'. The n refers to the number of bytes that the user is asking the program to read. If no value is provided, the entire file is read.
	b. readline()	--> optional argument 'n'. The n refers to the number of bytes that the user is asking the program to read. Even if the value of 'n' is greater than the number of Bytes on that 			    line, it will only return what is written in 1 line.
	c. readlines()	--> option argument 'n'. The n refers to the number of bytes that the user is asking the program to read. Returns a single line result, in the form of a list